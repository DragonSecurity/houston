// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  permission          String    @default("USER")
  onboardingCompleted Boolean   @default(false)

  // Subscription fields
  stripeCustomerId   String?
  subscriptionId     String?
  subscriptionStatus String?   @default("inactive")
  planId             String?   @default("free")
  billingPeriod      String?   @default("monthly")
  currentPeriodEnd   DateTime?

  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Usage tracking
  usageItems UsageItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model Feedback {
  id        String   @id @default(cuid())
  content   String
  type      String?
  userId    String?
  createdAt DateTime @default(now())
}

// New models for subscription limits
model SubscriptionPlan {
  id                   String   @id
  name                 String
  description          String
  features             Json // Array of features
  limits               Json // Key-value pairs of limit names and values
  monthlyPrice         Int // Price in cents
  annualPrice          Int // Price in cents
  stripePriceIdMonthly String?
  stripePriceIdAnnual  String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model UsageItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemType  String // e.g., "api_calls", "storage", "exports"
  count     Int      @default(1)
  metadata  Json? // Additional data about the usage
  createdAt DateTime @default(now())

  @@index([userId, itemType])
}
